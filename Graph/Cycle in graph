class Solution {
  public:
      bool dfs(int vertex, int parent, vector<vector<int>> &g, vector<int> &vis){
      vis[vertex]=1;
      bool isLoopExists=false;
      for(auto child:g[vertex]){
          if(vis[child] && child == parent ) continue;
          if(vis[child]) return true;
          isLoopExists |= dfs(child, vertex, g, vis);
      }
      return isLoopExists;
  }
  
    bool isCycle(int V, vector<int> adj[]) {
        vector<int>vis(V, 0);
        vector<vector<int>>g(V);
        for(int i=0;i<V;i++){
            for(int j=0;j<adj[i].size();j++){
                g[i].push_back(adj[i][j]);
            }
        }
        bool ans=false;
        for(int i=0;i<V;i++){
            if(vis[i]) continue;
            ans |= dfs(i, -1, g, vis);
        }
        return ans;
        
    }
